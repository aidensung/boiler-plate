{"version":3,"sources":["components/views/LandingPage/LandingPage.js","_actions/types.js","_actions/user_actions.js","components/views/LoginPage/LoginPage.js","components/views/RegisterPage/RegisterPage.js","hoc/auth.js","App.js","serviceWorker.js","_reducers/index.js","_reducers/user_reducer.js","index.js"],"names":["withRouter","props","useEffect","Axios","get","then","res","console","log","style","display","justifyContent","alignItems","width","height","onClick","response","data","logoutSuccess","history","push","alert","ActionTypes","LOGIN_USER","REGISTER_USER","AUTH_USER","loginUser","dataToSubmit","request","post","type","payload","registerUser","auth","dispatch","useDispatch","useState","email","password","userCredentials","setCredentials","handleSubmit","event","a","preventDefault","loginSuccess","handleChange","target","name","value","flexDirection","onSubmit","onChange","label","required","confirmPassword","registerSuccess","SpecificComponent","option","adminRoute","AuthenticationCheck","isAuth","isAdmin","App","exact","path","component","Auth","LandingPage","LoginPage","RegisterPage","Boolean","window","location","hostname","match","rootReducer","combineReducers","user","state","action","register","userData","middlewares","promiseMiddleware","ReduxThunk","store","applyMiddleware","createStore","createStoreWithMiddleware","Reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d0b76b22.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport Axios from 'axios';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction LandingPage(props) {\r\n  useEffect(() => {\r\n    Axios.get('/api/hello').then((res) => console.log(res));\r\n  }, []);\r\n\r\n  const handleLogout = () => {\r\n    Axios.get('/api/users/logout').then((response) => {\r\n      if (response.data.logoutSuccess) {\r\n        props.history.push('/login');\r\n      } else {\r\n        alert('Failed to log out');\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        height: '100vh',\r\n      }}\r\n    >\r\n      <h2>Landing Page</h2>\r\n\r\n      <button onClick={handleLogout}>Logout</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(LandingPage);\r\n","const ActionTypes = {\r\n  LOGIN_USER: 'LOGIN_USER',\r\n  REGISTER_USER: 'REGISTER_USER',\r\n  AUTH_USER: 'AUTH_USER',\r\n};\r\n\r\nexport default ActionTypes;\r\n","import Axios from 'axios';\r\nimport ActionTypes from '../_actions/types';\r\n\r\nexport function loginUser(dataToSubmit) {\r\n  const request = Axios.post('/api/users/login', dataToSubmit).then(\r\n    (response) => response.data\r\n  );\r\n\r\n  return {\r\n    type: ActionTypes.LOGIN_USER,\r\n    payload: request,\r\n  };\r\n}\r\n\r\nexport function registerUser(dataToSubmit) {\r\n  const request = Axios.post('/api/users/register', dataToSubmit).then(\r\n    (response) => response.data\r\n  );\r\n\r\n  return {\r\n    type: ActionTypes.REGISTER_USER,\r\n    payload: request,\r\n  };\r\n}\r\n\r\nexport function auth() {\r\n  const request = Axios.get('/api/users/auth').then(\r\n    (response) => response.data\r\n  );\r\n\r\n  return {\r\n    type: ActionTypes.AUTH_USER,\r\n    payload: request,\r\n  };\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { loginUser } from '../../../_actions/user_actions';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction LoginPage(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [userCredentials, setCredentials] = useState({\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n  const { email, password } = userCredentials;\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    dispatch(loginUser(userCredentials)).then((response) => {\r\n      if (response.payload.loginSuccess) {\r\n        props.history.push('/');\r\n      } else {\r\n        alert('Error');\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setCredentials({ ...userCredentials, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        height: '100vh',\r\n      }}\r\n    >\r\n      <form\r\n        style={{ display: 'flex', flexDirection: 'column' }}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <label>Email</label>\r\n        <input\r\n          name='email'\r\n          type='email'\r\n          value={email}\r\n          onChange={handleChange}\r\n          label='email'\r\n          required\r\n        />\r\n        <label>Password</label>\r\n        <input\r\n          name='password'\r\n          type='password'\r\n          value={password}\r\n          onChange={handleChange}\r\n          label='email'\r\n          required\r\n        />\r\n        <br />\r\n        <button>Login</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(LoginPage);\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { registerUser } from '../../../_actions/user_actions';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction RegisterPage(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [userCredentials, setCredentials] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n  });\r\n\r\n  const { name, email, password, confirmPassword } = userCredentials;\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (password !== confirmPassword) {\r\n      return alert('Passwords do not match!');\r\n    }\r\n\r\n    dispatch(registerUser(userCredentials)).then((response) => {\r\n      if (response.payload.registerSuccess) {\r\n        props.history.push('/login');\r\n      } else {\r\n        alert('Failed to register');\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setCredentials({ ...userCredentials, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        height: '100vh',\r\n      }}\r\n    >\r\n      <form\r\n        style={{ display: 'flex', flexDirection: 'column' }}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <label>Name</label>\r\n        <input\r\n          name='name'\r\n          type='text'\r\n          value={name}\r\n          onChange={handleChange}\r\n          label='name'\r\n          required\r\n        />\r\n        <label>Email</label>\r\n        <input\r\n          name='email'\r\n          type='email'\r\n          value={email}\r\n          onChange={handleChange}\r\n          label='email'\r\n          required\r\n        />\r\n        <label>Password</label>\r\n        <input\r\n          name='password'\r\n          type='password'\r\n          value={password}\r\n          onChange={handleChange}\r\n          label='email'\r\n          required\r\n        />\r\n        <label>Confirm Password</label>\r\n        <input\r\n          name='confirmPassword'\r\n          type='password'\r\n          value={confirmPassword}\r\n          onChange={handleChange}\r\n          label='confirmPassword'\r\n          required\r\n        />\r\n        <br />\r\n        <button>Register</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(RegisterPage);\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { auth } from '../_actions/user_actions';\r\n\r\nexport default function (SpecificComponent, option, adminRoute = null) {\r\n  // null => anyone can access\r\n  // true => logged in user only\r\n  // false => logged in user cannot access\r\n\r\n  function AuthenticationCheck(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    dispatch(auth()).then((response) => {\r\n      console.log(response);\r\n\r\n      if (!response.payload.isAuth) {\r\n        if (option) {\r\n          props.history.push('/login');\r\n        }\r\n      } else {\r\n        if (adminRoute && !response.payload.isAdmin) {\r\n          props.history.push('/');\r\n        } else {\r\n          if (option === false) {\r\n            props.history.push('/');\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return <SpecificComponent />;\r\n  }\r\n\r\n  return AuthenticationCheck;\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport LandingPage from './components/views/LandingPage/LandingPage';\nimport LoginPage from './components/views/LoginPage/LoginPage';\nimport RegisterPage from './components/views/RegisterPage/RegisterPage';\nimport Auth from './hoc/auth';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path='/' component={Auth(LandingPage, null)} />\n        <Route exact path='/login' component={Auth(LoginPage, false)} />\n        <Route exact path='/register' component={Auth(RegisterPage, false)} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport user from './user_reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  user,\r\n});\r\n\r\nexport default rootReducer;\r\n","import ActionTypes from '../_actions/types';\r\n\r\nexport default function (state = {}, action) {\r\n  switch (action.type) {\r\n    case ActionTypes.LOGIN_USER:\r\n      return { ...state, loginSuccess: action.payload };\r\n    case ActionTypes.REGISTER_USER:\r\n      return { ...state, register: action.payload };\r\n    case ActionTypes.AUTH_USER:\r\n      return { ...state, userData: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport promiseMiddleware from 'redux-promise';\nimport ReduxThunk from 'redux-thunk';\nimport Reducer from './_reducers';\n\nimport 'antd/dist/antd.css';\n\nconst middlewares = [promiseMiddleware, ReduxThunk];\n\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);\n\nconst store = createStoreWithMiddleware(\n  Reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}